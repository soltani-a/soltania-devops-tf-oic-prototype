name: Build and Deploy OIC Job

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.0  # Utiliser la version v3

      - name: Set up Java
        uses: actions/setup-java@v4.4.0  # Utiliser la version v3
        with:
          distribution: 'temurin'
          java-version: '11'


      - name: Build with Maven Clean
        run: mvn clean

      - name: Build with Maven install
        run: mvn install

      - name: List target directory
        run: ls -al target  # Étape pour vérifier le contenu du répertoire `target`

      - name: Build with Maven Package
        run: mvn package

      - name: List target directory
        run: ls -al target  # Étape pour vérifier le contenu du répertoire `target`

      - name: Rename ZIP to IAR
        run: |
          mv target/*.zip target/*.iar  # Renomme le fichier .zip en .iar

      - name: Get exact IAR file name
        id: iar_name
        run: |
          # Rechercher le fichier .iar dans le répertoire target/ et capturer le nom
          FILE_NAME=$(find target/ -name "*.iar" -type f)
          echo "IAR file found: ${FILE_NAME}"
          echo "IAR_FILE_NAME=${FILE_NAME}" >> $GITHUB_ENV  # Enregistrer le nom exact du fichier dans une variable d'environnement
  
      - name: Debug IAR File Name
        run: |
          # Vérifier la valeur de la variable d'environnement
          echo "IAR_FILE_NAME variable is set to: ${{ env.IAR_FILE_NAME }}"
          ls -al ${{ env.IAR_FILE_NAME }}  # Lister les informations sur le fichier capturé pour vérification

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: my-oic-job
          path: ${{ env.FILE }}  # Utiliser la variable d'environnement avec le chemin exact du fichier

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4.4.0   # Utiliser la version v3
        with:
          name: my-oic-job

      - name: Publish to Nexus Repository
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
          NEXUS_URL:      ${{ vars.NEXUS_URL }}
        run: |
          curl -u $NEXUS_USERNAME:$NEXUS_PASSWORD \
            --upload-file my-oic-job.iar \
            $NEXUS_URL

  deploy:
    needs: publish
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production  # Utiliser un environnement pour les approbations

    steps:
      - name: Deploy to OIC
        env:
          OIC_USERNAME: ${{ secrets.OIC_USERNAME }}
          OIC_PASSWORD: ${{ secrets.OIC_PASSWORD }}
          OIC_INSTANCE_URL: ${{ secrets.OIC_INSTANCE_URL }}  # Assigner les secrets dans `env`
        run: |
          curl -u $OIC_USERNAME:$OIC_PASSWORD \
            -F "file=@my-oic-job.iar" \
            -F "deploy=true" \
            $OIC_INSTANCE_URL/ic/api/integration/v1/deployments/
